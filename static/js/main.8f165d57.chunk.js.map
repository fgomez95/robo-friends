{"version":3,"sources":["components/Card.js","components/Cards.js","components/SearchBox.js","containers/App.js","actions.js","actionTypes.js","serviceWorker.js","reducer.js","index.js"],"names":["card","props","react_default","a","createElement","className","src","image","alt","email","name","Cards","_ref","cards","data","map","robot","Card","concat","id","key","searchBox","type","value","onChange","onChangeHandler","App","state","robots","searchField","this","onGetRobots","_this2","filterRobots","filter","toLowerCase","includes","SearchBox","onSearch","components_Cards","Component","connect","loading","error","errorMessage","dispatch","e","payload","target","fetch","then","response","json","result","catch","err","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","message","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f165d57.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = (props) => {\n    return(\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={props.image} \n                alt={props.email}/>\n                <h3>{props.name}</h3>\n                <p>{props.email}</p>\n            </div>\n        );\n};\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst Cards = ({data}) => {\n    const cards = data.map(robot => {\n        return (\n            <Card \n            name={robot.name}\n            email={robot.email}\n            image={`https://robohash.org/${robot.id}?set=set2`}\n            key={robot.id}\n            />\n            );\n    });\n    \n    return (\n        <div>\n            {cards}\n        </div>\n        );\n};\n\nexport default Cards;","import React from 'react';\n\nconst searchBox = (props) => {\n    return(\n        <input type=\"text\" \n        value={props.value} \n        onChange={props.onChangeHandler}\n        />\n        );\n};\n\nexport default searchBox;","/* global fetch */\nimport React, { Component } from 'react';\nimport './App.css';\nimport Cards from '../components/Cards';\nimport SearchBox from '../components/SearchBox';\nimport { connect } from 'react-redux';\nimport { setSearchField, getRobots } from '../actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearch: (e) => dispatch(setSearchField(e.target.value)),\n    onGetRobots: () => dispatch(getRobots())\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField,\n    robots: state.robots,\n    loading: state.loading,\n    error: state.error,\n    errorMessage: state.errorMessage\n  };\n};\n\nclass App extends Component {\n  state = {\n    robots: [],\n    searchField: '',\n  }\n  \n  componentDidMount(){\n    this.props.onGetRobots();\n  }\n  \n  render() {\n    const filterRobots = this.props.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.props.searchField);\n    });\n    return (\n      <div className=\"tc\">\n        <h1 className=\"bg-black color-name white\">\n          Robo Friends\n        </h1>\n        <SearchBox \n        onChangeHandler={this.props.onSearch}\n        value={this.props.searchField}\n        />\n        <Cards \n        data={filterRobots}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from './actionTypes';\n\nexport const setSearchField = (text) => ({\n    type: actionTypes.SET_SEARCH_FIELD,\n    payload: text\n});\n\nexport const getRobots = () => dispatch => {\n    dispatch({ type: actionTypes.REQUEST_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(result => dispatch({\n            type: actionTypes.REQUEST_SUCCESS,\n            payload: result\n        }))\n        .catch(err => {\n            dispatch({\n                type: actionTypes.REQUEST_FAILED,\n                payload: err,\n            });\n        });\n}","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\n\nexport const REQUEST_PENDING = 'REQUEST_PENDING';\nexport const REQUEST_SUCCESS = 'REQUEST_SUCCESS';\nexport const REQUEST_FAILED = 'REQUEST_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actionTypes';\n\nconst initialState = {\n  searchField: '',\n  robots: [],\n  error: false,\n  loading: false,\n  errorMessage: '',\n};\n\nconst reducer = (state=initialState, action) => {\n  switch(action.type){\n      case actionTypes.SET_SEARCH_FIELD:\n        return {\n          ...state,\n          searchField: action.payload\n        };\n      case actionTypes.REQUEST_FAILED:\n        return {\n          ...state,\n          error: true,\n          message: action.payload\n        };\n      case actionTypes.REQUEST_SUCCESS:\n        return {\n          ...state,\n          error: false,\n          message: '',\n          robots: action.payload,\n          loading: false,\n        };\n      case actionTypes.REQUEST_PENDING:\n        return {\n          ...state,\n          error: false,\n          message: '',\n          loading: true,\n        };\n      default: \n        return state;\n  }  \n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducer';\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}